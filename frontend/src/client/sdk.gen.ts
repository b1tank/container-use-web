// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetApiV1EnvironmentsData, GetApiV1EnvironmentsResponse, GetApiV1EnvironmentsByIdLogsData, GetApiV1EnvironmentsByIdLogsResponse, GetApiV1EnvironmentsByIdDiffData, GetApiV1EnvironmentsByIdDiffResponse, GetApiV1FilesData, GetApiV1FilesResponse, GetApiV1GitData, GetApiV1GitResponse, PostApiV1GitCheckoutData, PostApiV1GitCheckoutResponse } from './types.gen';

export class DefaultService {
    /**
     * @param data The data for the request.
     * @param data.folder Working folder for the CLI command
     * @param data.cli Path to the container-use CLI
     * @returns EnvironmentList List of environments
     * @throws ApiError
     */
    public static getApiV1Environments(data: GetApiV1EnvironmentsData = {}): CancelablePromise<GetApiV1EnvironmentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/environments',
            query: {
                folder: data.folder,
                cli: data.cli
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id Environment ID
     * @param data.folder Working folder for the CLI command
     * @param data.cli Path to the container-use CLI
     * @returns EnvironmentLogs Environment logs
     * @throws ApiError
     */
    public static getApiV1EnvironmentsByIdLogs(data: GetApiV1EnvironmentsByIdLogsData): CancelablePromise<GetApiV1EnvironmentsByIdLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/environments/{id}/logs',
            path: {
                id: data.id
            },
            query: {
                folder: data.folder,
                cli: data.cli
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id Environment ID
     * @param data.folder Working folder for the CLI command
     * @param data.cli Path to the container-use CLI
     * @returns EnvironmentDiff Environment diff
     * @throws ApiError
     */
    public static getApiV1EnvironmentsByIdDiff(data: GetApiV1EnvironmentsByIdDiffData): CancelablePromise<GetApiV1EnvironmentsByIdDiffResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/environments/{id}/diff',
            path: {
                id: data.id
            },
            query: {
                folder: data.folder,
                cli: data.cli
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path Folder path to list. Defaults to home folder if not provided
     * @returns unknown Folder listing
     * @throws ApiError
     */
    public static getApiV1Files(data: GetApiV1FilesData = {}): CancelablePromise<GetApiV1FilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files',
            query: {
                path: data.path
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folder Folder path to get git information for
     * @returns unknown Git repository information
     * @throws ApiError
     */
    public static getApiV1Git(data: GetApiV1GitData): CancelablePromise<GetApiV1GitResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/git',
            query: {
                folder: data.folder
            },
            errors: {
                404: 'Folder not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folder Folder path for git operations
     * @param data.requestBody
     * @returns unknown Git checkout result
     * @throws ApiError
     */
    public static postApiV1GitCheckout(data: PostApiV1GitCheckoutData): CancelablePromise<PostApiV1GitCheckoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/git/checkout',
            query: {
                folder: data.folder
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request (not a git repository or uncommitted changes)',
                500: 'Internal server error'
            }
        });
    }
    
}