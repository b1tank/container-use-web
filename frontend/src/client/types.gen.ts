// This file is auto-generated by @hey-api/openapi-ts

export type Environment = {
    id: string;
    title: string;
    created: string;
    updated: string;
};

export type EnvironmentDiff = {
    environmentId: string;
    diff: string;
    timestamp: string;
};

export type EnvironmentList = Array<Environment>;

export type EnvironmentLogs = {
    environmentId: string;
    logs: string;
    timestamp: string;
};

export type Error = {
    error: string;
    details?: {
        exitCode: number;
        stderr: string;
        command: string;
        cwd: string;
    };
};

export type GetApiV1EnvironmentsData = {
    /**
     * Path to the container-use CLI
     */
    cli?: string;
    /**
     * Working folder for the CLI command
     */
    folder?: string;
};

export type GetApiV1EnvironmentsResponse = (EnvironmentList);

export type GetApiV1EnvironmentsByIdLogsData = {
    /**
     * Path to the container-use CLI
     */
    cli?: string;
    /**
     * Working folder for the CLI command
     */
    folder?: string;
    /**
     * Environment ID
     */
    id: string;
};

export type GetApiV1EnvironmentsByIdLogsResponse = (EnvironmentLogs);

export type GetApiV1EnvironmentsByIdDiffData = {
    /**
     * Path to the container-use CLI
     */
    cli?: string;
    /**
     * Working folder for the CLI command
     */
    folder?: string;
    /**
     * Environment ID
     */
    id: string;
};

export type GetApiV1EnvironmentsByIdDiffResponse = (EnvironmentDiff);

export type GetApiV1FilesData = {
    /**
     * Folder path to list. Defaults to home folder if not provided
     */
    path?: string;
};

export type GetApiV1FilesResponse = ({
    /**
     * Current folder path
     */
    path: string;
    /**
     * List of files and directories in the current path
     */
    items: Array<{
        /**
         * Name of the file or folder
         */
        name: string;
        /**
         * Full path to the file or folder
         */
        path: string;
        /**
         * Type of the entry
         */
        type: 'file' | 'folder';
        /**
         * Size of the file in bytes (only for files)
         */
        size?: number;
        /**
         * Last modified timestamp
         */
        modified?: string;
    }>;
    /**
     * Parent folder path, null if at root
     */
    parent: (string) | null;
});

export type GetApiV1GitData = {
    /**
     * Folder path to get git information for
     */
    folder: string;
};

export type GetApiV1GitResponse = ({
    /**
     * Whether the operation was successful
     */
    success: boolean;
    /**
     * Git repository information
     */
    data: {
        /**
         * Current branch name
         */
        currentBranch: string;
        /**
         * Whether the folder is a git repository
         */
        isRepository: boolean;
        /**
         * Whether there are uncommitted changes
         */
        hasUncommittedChanges: boolean;
        /**
         * List of all branches
         */
        branches: Array<{
            /**
             * Branch name
             */
            name: string;
            /**
             * Whether this is the current branch
             */
            current: boolean;
            /**
             * Whether this is a remote branch
             */
            remote: boolean;
            /**
             * Upstream branch name
             */
            upstream?: string;
            /**
             * Number of commits ahead of upstream
             */
            ahead?: number;
            /**
             * Number of commits behind upstream
             */
            behind?: number;
        }>;
    };
});

export type PostApiV1GitCheckoutData = {
    /**
     * Folder path for git operations
     */
    folder: string;
    requestBody?: {
        /**
         * Branch name to checkout
         */
        branch: string;
    };
};

export type PostApiV1GitCheckoutResponse = ({
    /**
     * Whether the checkout was successful
     */
    success: boolean;
    /**
     * Success or error message
     */
    message: string;
    /**
     * Updated git repository information
     */
    data?: {
        /**
         * Current branch name
         */
        currentBranch: string;
        /**
         * Whether the folder is a git repository
         */
        isRepository: boolean;
        /**
         * Whether there are uncommitted changes
         */
        hasUncommittedChanges: boolean;
        /**
         * List of all branches
         */
        branches: Array<{
            /**
             * Branch name
             */
            name: string;
            /**
             * Whether this is the current branch
             */
            current: boolean;
            /**
             * Whether this is a remote branch
             */
            remote: boolean;
            /**
             * Upstream branch name
             */
            upstream?: string;
            /**
             * Number of commits ahead of upstream
             */
            ahead?: number;
            /**
             * Number of commits behind upstream
             */
            behind?: number;
        }>;
    };
});